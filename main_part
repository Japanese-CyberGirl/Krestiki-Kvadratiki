// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// Released under the GPLv3 license to match the rest of the
// Adafruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
#define PIN        6 // On Trinket or Gemma, suggest changing this to 1

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 117 // Popular NeoPixel ring size

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels
int i=0;
int x;
char value;
int k[9];
int n[9];
void setup() {
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)

    for(int i=0; i<NUMPIXELS; i++) { // For each pixel...

    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
    // Here we're using a moderately bright green color:

    pixels.show();   // Send the updated pixel colors to the hardware.

    delay(1); // Pause before next pass through loop
  }
    pixels.clear(); // Set all pixel colors to 'off'
    pixels.show();   // Send the updated pixel colors to the hardware.
    Serial.begin(9600);
}




void loop() {

  
if (Serial.available()>0) {  value = Serial.read();    Serial.println(value); if (value!='\n') {i++;}}//изначально счетчик (i) равен нолю. четное - "нолик", нечетное - "крестик" 
Serial.print(i);
x = int(value-'0');  
if (i%2!=0){
  stopen(x);
  krest(x);
  k[i]=x;} 
else{
  stopen(x);
  noliki(x);
  n[i]=x;}

  if ((k[1]!=0 and k[2]!=0 and k[3]!=0) or (k[4]!=0 and k[5]!=0 and k[6]!=0) or (k[7]!=0 and k[8]!=0 and k[9]!=0) or (k[1]!=0 and k[5]!=0 and k[9]!=0) or (k[3]!=0 and k[5]!=0 and k[7]!=0) or (k[1]!=0 and k[4]!=0 and k[7]!=0) or (k[2]!=0 and k[5]!=0 and k[8]!=0) or (k[3]!=0 and k[6]!=0 and k[9]!=0)){
    pixels.clear();
    k[1]=0; k[2]=0; k[3]=0; k[4]=0; k[5]=0; k[6]=0; k[7]=0; k[8]=0; 
    n[1]=0; n[2]=0; n[3]=0; n[4]=0; n[5]=0; n[6]=0; n[7]=0; n[8]=0; 
  }
  if ((n[1]!=0 and n[2]!=0 and n[3]!=0) or (n[4]!=0 and n[5]!=0 and n[6]!=0) or (n[7]!=0 and n[8]!=0 and n[9]!=0) or (n[1]!=0 and n[5]!=0 and n[9]!=0) or (n[3]!=0 and n[5]!=0 and n[7]!=0) or (n[1]!=0 and n[4]!=0 and n[7]!=0) or (n[2]!=0 and n[5]!=0 and n[8]!=0) or (n[3]!=0 and n[6]!=0 and n[9]!=0)){
    pixels.clear();
    n[1]=0; n[2]=0; n[3]=0; n[4]=0; n[5]=0; n[6]=0; n[7]=0; n[8]=0; 
    k[1]=0; k[2]=0; k[3]=0; k[4]=0; k[5]=0; k[6]=0; k[7]=0; k[8]=0; 
  }
}
    
void noliki(int p) {
  pixels.setPixelColor((p-1)*13, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+1, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+2, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+3, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+4, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+5, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+6, pixels.Color(0, 150, 0));
  pixels.setPixelColor((p-1)*13+7, pixels.Color(0, 150, 0));
    pixels.show();   // Send the updated pixel colors to the hardware.
}

void krest(int p) {
  pixels.setPixelColor((p-1)*13+1, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+3, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+5, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+7, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+8, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+9, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+10, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+11, pixels.Color(150, 0, 0));
  pixels.setPixelColor((p-1)*13+12, pixels.Color(150, 0, 0));
    pixels.show();   // Send the updated pixel colors to the hardware.
  
}
void stopen(int p) {
  pixels.setPixelColor((p-1)*13+1, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+3, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+5, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+7, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+8, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+9, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+10, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+11, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+12, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+2, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+4, pixels.Color(0, 0, 0));
  pixels.setPixelColor((p-1)*13+6, pixels.Color(0, 0, 0));
    pixels.show();
}
